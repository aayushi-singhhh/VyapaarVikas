"use client";

import { useState } from "react";
import { X, Send, Mic, MicOff, Bot, User, MessageCircle } from "lucide-react";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { ScrollArea } from "../ui/scroll-area";

interface AIAssistantProps {
  isOpen: boolean;
  onClose: () => void;
}

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
}

export function AIAssistant({ isOpen, onClose }: AIAssistantProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ Vyapaar ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [isTyping, setIsTyping] = useState(false);

  const recommendedQuestions = [
    "Loan Ready Score ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à?",
    "‡§ï‡•à‡§∏‡•á ‡§∏‡•ç‡§ü‡•Ç‡§°‡•á‡§Ç‡§ü ‡§∏‡•á reel ‡§¨‡§®‡§µ‡§æ‡§ä‡§Ç?",
    "‡§Ö‡§™‡§®‡§æ ‡§¨‡§ø‡§ú‡§®‡•á‡§∏ ‡§ï‡•à‡§∏‡•á ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•Ç‡§Ç?",
    "Waste2Worth ‡§™‡§∞ scrap ‡§ï‡•à‡§∏‡•á ‡§¨‡•á‡§ö‡•Ç‡§Ç?"
  ];

  const handleSendMessage = (message: string) => {
    if (!message.trim()) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: message,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate bot response
    setTimeout(() => {
      const botResponse = generateBotResponse(message);
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: botResponse,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const generateBotResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('loan') || lowerMessage.includes('‡§ã‡§£')) {
      return 'Loan Readiness Score ‡§Ü‡§™‡§ï‡•Ä financial health ‡§ï‡•ã ‡§¶‡§∞‡•ç‡§∂‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•á business revenue, GST compliance, ‡§î‡§∞ credit history ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§¨‡§®‡§§‡§æ ‡§π‡•à‡•§ ‡§Ö‡§ö‡•ç‡§õ‡§æ score ‡§π‡•ã‡§®‡•á ‡§∏‡•á ‡§Ü‡§™‡§ï‡•ã ‡§¨‡•á‡§π‡§§‡§∞ interest rates ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ üìä';
    }
    
    if (lowerMessage.includes('student') || lowerMessage.includes('reel') || lowerMessage.includes('‡§∏‡•ç‡§ü‡•Ç‡§°‡•á‡§Ç‡§ü')) {
      return 'Student creators ‡§ï‡•á ‡§∏‡§æ‡§• collaborate ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è Student AdGenie section ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§è‡§Ç‡•§ ‡§µ‡§π‡§æ‡§Å ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á budget ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ creators ‡§ï‡•ã filter ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§â‡§®‡§ï‡•á portfolio ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ üé•‚ú®';
    }
    
    if (lowerMessage.includes('register') || lowerMessage.includes('‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞')) {
      return 'Business registration ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•ã Udyam Registration portal ‡§™‡§∞ ‡§ú‡§æ‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§ ‡§Ü‡§™‡§ï‡•ã ‡§Ø‡•á documents ‡§ö‡§æ‡§π‡§ø‡§è: Aadhaar Card, PAN Card, Bank Account Details‡•§ ‡§π‡§Æ‡§æ‡§∞‡§æ Mini MBA section ‡§Æ‡•á‡§Ç detailed guide ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä‡•§ üìã';
    }
    
    if (lowerMessage.includes('waste') || lowerMessage.includes('scrap') || lowerMessage.includes('‡§Ö‡§™‡§∂‡§ø‡§∑‡•ç‡§ü')) {
      return 'Waste2Worth ‡§Æ‡•á‡§Ç ‡§Ü‡§™ ‡§Ö‡§™‡§®‡§æ waste sell ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ Plastic ‚Çπ15/kg, Paper ‚Çπ8/kg, Metal ‚Çπ25/kg ‡§™‡§∞ ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à‡•§ Photo upload ‡§ï‡§∞‡•á‡§Ç, weight ‡§¨‡§§‡§æ‡§è‡§Ç, ‡§î‡§∞ pickup schedule ‡§ï‡§∞‡•á‡§Ç‡•§ üå±‚ôªÔ∏è';
    }
    
    return '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å! ‡§Ü‡§™ specific questions ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§´‡§ø‡§∞ recommended questions ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ï‡•ã‡§à choose ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ üòä';
  };

  const toggleVoice = () => {
    setIsListening(!isListening);
    // In a real implementation, you would integrate with Web Speech API
    if (!isListening) {
      setTimeout(() => {
        setIsListening(false);
        setInputMessage("‡§Ü‡§™‡§ï‡§æ voice message ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§è‡§ó‡§æ...");
      }, 3000);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex">
      {/* Backdrop */}
      <div 
        className="flex-1 bg-black/50 backdrop-blur-sm"
        onClick={onClose}
      />
      
      {/* Chat Panel */}
      <div className="w-full max-w-md bg-white/95 backdrop-blur-lg shadow-2xl slide-in-right flex flex-col h-full max-h-screen">
        {/* Header */}
        <div className="p-4 border-b border-gray-200/50 bg-gradient-to-r from-blue-500 to-purple-500 text-white flex-shrink-0">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                <Bot className="w-6 h-6" />
              </div>
              <div>
                <h3 className="font-semibold">AI Assistant</h3>
                <p className="text-sm opacity-75">Vyapaar ‡§∏‡§π‡§æ‡§Ø‡§ï ü§ñ</p>
              </div>
            </div>
            <Button 
              variant="ghost" 
              size="sm"
              onClick={onClose}
              className="text-white hover:bg-white/20 rounded-full"
            >
              <X className="w-5 h-5" />
            </Button>
          </div>
        </div>

        {/* Messages */}
        <ScrollArea className="flex-1 p-4 overflow-y-auto">
          <div className="space-y-4">
            {messages.map((message) => (
              <div 
                key={message.id}
                className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                {message.type === 'bot' && (
                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
                    <Bot className="w-4 h-4 text-white" />
                  </div>
                )}
                
                <div 
                  className={`max-w-[80%] p-3 rounded-2xl ${
                    message.type === 'user'
                      ? 'bg-blue-500 text-white rounded-br-none'
                      : 'bg-gray-100 text-gray-800 rounded-bl-none'
                  }`}
                >
                  <p className="text-sm leading-relaxed">{message.content}</p>
                  <p className="text-xs opacity-60 mt-1">
                    {message.timestamp.toLocaleTimeString('hi-IN', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </p>
                </div>

                {message.type === 'user' && (
                  <div className="w-8 h-8 bg-gray-400 rounded-full flex items-center justify-center flex-shrink-0">
                    <User className="w-4 h-4 text-white" />
                  </div>
                )}
              </div>
            ))}

            {/* Typing indicator */}
            {isTyping && (
              <div className="flex gap-3 justify-start">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <Bot className="w-4 h-4 text-white" />
                </div>
                <div className="bg-gray-100 p-3 rounded-2xl rounded-bl-none">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>

        {/* Recommended Questions */}
        {messages.length === 1 && (
          <div className="p-4 border-t border-gray-200/50 bg-gray-50/50 flex-shrink-0">
            <h4 className="text-sm font-medium text-gray-700 mb-3">Suggested Questions:</h4>
            <div className="space-y-2">
              {recommendedQuestions.map((question, index) => (
                <button
                  key={index}
                  onClick={() => handleSendMessage(question)}
                  className="w-full text-left p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200 text-sm"
                >
                  <MessageCircle className="w-4 h-4 inline mr-2 text-blue-500" />
                  {question}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Input */}
        <div className="p-4 border-t border-gray-200/50 bg-white/80 flex-shrink-0">
          <div className="flex gap-2">
            <div className="flex-1 relative">
              <Input
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                placeholder="Type your message... / ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç..."
                className="pr-12 rounded-full border-gray-300 focus:border-blue-500"
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    handleSendMessage(inputMessage);
                  }
                }}
              />
              <Button
                size="sm"
                variant="ghost"
                onClick={toggleVoice}
                className={`absolute right-1 top-1/2 transform -translate-y-1/2 rounded-full w-8 h-8 p-0 ${
                  isListening ? 'text-red-500 bg-red-50' : 'text-gray-400 hover:text-blue-500'
                }`}
              >
                {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
              </Button>
            </div>
            <Button
              onClick={() => handleSendMessage(inputMessage)}
              disabled={!inputMessage.trim()}
              className="rounded-full w-10 h-10 p-0 bg-blue-500 hover:bg-blue-600"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
          {isListening && (
            <p className="text-xs text-red-500 mt-2 text-center animate-pulse">
              üé§ Listening... / ‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...
            </p>
          )}
        </div>
      </div>
    </div>
  );
}